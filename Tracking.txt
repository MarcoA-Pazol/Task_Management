17 / 03 / 24: Project starting 
For today I started the client project development, I started with the model creation, initial project migrations and the README.md documentation.
I already have created my initial repository and initial commit in github using git bash and a remote repository previously created.
For tomorrow I will create and implement all the api.py and serializers.py files logic and architechture.
I will create the front_end app in my Django project to display the graphic project web visualization and I will start with that part on tomorrow.

19 / 03 / 24
-I have to implement the front-end app withing Django. ✔
-Start with Web Interface with HTML5 standart (HTML, CSS, JS). ✔
-Start the BBDD model for tasks and employees management. ✔
-And I have to complete the before yesterday given tasks.("For tomorrow I will create and implement all the api.py and serializers.py files logic and architechture. I will create the front_end app in my Django project to display the graphic project web visualization and I will start with that part on tomorrow.") ✔

21 / 03 / 24
-Implement views on FrontEnd/views.py ✔
-Implement Urls on Task_Manager/urls.py and FrontEnd/urls.py ✔
-Organize the Back-End and Front-End into different two apps and register them in settings.py on general project directory. ✔

23 / 03 / 24
-Implement the first welcome / home page and ensures that the url is loaded when the server is running (localhost for developing, it will be changed in future to a production server host for the client use). ✔ 
-Create the first 4 templates for the views use(home, tasks, help, team). ✔
-Implement Navigation Menu as a layout template including it into all first 4 navigable templates. ✔
-Implement CSS style for the navigation menu. ✔
-Implement tasks, help, team views to load templates in FrontEnd/views.py directory. ✔

31 / 03 / 24
-Finalize HTML, CSS style for the Top bar and implement it in every project navegable template. ✔
-Finalize HTML and CSS style for footer and implement it in every project navegable template. ✔
-Finalize base HTML structure for header, footer and body and implement it in every project navegable template. ✔

09 / 04 / 24
-Start to create help questions model and help answers model. ✔
-Implement loop to add every created answer-question in the help page. ✔
-Implement the basic HTML, CSS and JS for the displayable answer for the questions in the help view. ✔

13 / 04 / 24
-Develop the register and login system. ✔
-Develop register and login templates and views. ✔

16 / 04 / 24
-Finalize the style and structure for the register template ✔
-Finalize the style and structure for the login template ✔
-Fix the style for the username on top bar when user is authenticated and logged in, and remove colormode button and fix that structure and style. ✔
-Recustomize the style for the top bar and the footer to look profesional and sites look like too. ✔

18 / 04 / 24
-Restyle the Home page to look more professional and simpliest. ✔
-Finalize Help page styling and structure. ✔
-Create Help Formulary and implement in Help view and template. ✔

21 / 04 / 24
-Implement CSS and HTML for Team page. ✔

27 / 04 / 24
-Create the needed models for personal tasks, teams, team tasks, etc. The necessary to well architechture and application workflow. ✔
-Structure the Team page(HTML). ✔
-Give style(CSS) to Team page. ✔ 

09 / 05 / 24
-Define a list of occupation choices in model or forms.py file. ✔
-Use a ChoiceField in form to display the list of occupation options. ✔
-Set up a function or method to determine the department based on the selected occupation. ✔
-Update the department field in your Employee model based on the selected occupation. ✔

14 / 05 / 24
-Comprobe the login(When new user is "created", it does not be logged automatically) ✔
-Comprobe user creation(Formulary does not being valid) ✔
-Comprobe the access_key is unique(primary key). ✔

16 / 05 / 24
-Create Team/... urls like "Join Team", "Create Team". ✔   
-Include urls on a Team/... urls. ✔
-Include templates for every team urls. ✔
-Include styles for every team urls. ✔
-Include view for every team urls. ✔

18 / 05 / 24
-Check every user does not initialize as a member of any team. ✔
-Manage team creation repeated access key to not display 404 error page when repeated access key is inputed in the join team form, just show a message on the page. ✔
-Manage team creation error when user have own team but for some reason(it must not ocurred) the owner of a team can create another team, so manage the error to just show a issue in the page and redirect to team create page. ✔
-Fix CreateTeam and JoinTeam formularies loading in their respective templates. ✔
-Comprobe if-else of "have_team" to display the create_team_form or not (It seems to be True when user join on a team via key_code), but when page is loaded it seems to be False. ✔

21 / 05 / 24
-Implement team edit CSS. ✔
-Implement team edit HTML. ✔
-Implement team edit URL. ✔
-Implement team edit View. ✔
-Implement team edit Form. ✔

22 / 05 / 24
-Finalize team edit View. ✔
-Finalize team edit CSS. ✔
-Finalize team edit HTML. ✔
-Implement edit team system, to edit description or team name(With acces_key validation). ✔

23 / 05 / 24
-Implement HTML for team overview. ✔
-Implement CSS for team overview. ✔
-Implement URL for team overview. ✔
-Implement View for team overview. ✔

24 / 05 / 24
-Implement button to edit owner team on teams overview (just habilitied to your own team). ✔
-Implement the way to display team overview(name, owner, members username, description). ✔

25 / 05 / 24
-Own Teams must be displayed in a different border color(yellow-gold) and different owner name color(orange).
-Finalize Teams displaying CSS(Same style that Team overview has)
-Implement button to get out of a Team.

Remaining tasks:
-Implement kickoff button for owner Team to kick members (Just habilited to Owner of a Team).
-Implement button to delete Team(owner team)
-Implement invitation system to invite members to your team depending the department(you cannot invite Designers to your Development team for example).
-Implement 'search' bar on top for tasks site and team site.
-Implement the initial questions and work areas(areas from the company) as initial configuration(this is not to be configured when the app were deployed on production stage and their company using).
-Implement CSS and HTML for Tasks page.
-Implement the tasks creation system on Tasks page.
-Implement self asigned Tasks deletion system on Task page.
-Implement the asigned task from another person not possible to be deleted system.
-Implement self asigned tasks modification system.
-Implement Tasks Formulary for creation and modification.
-Implement time to deliver tasks system.
-Implement notification system for advice workers when the task is made to be delivery.
-Implement notification messages to advice when another people has asigned us a task.
-Implement score system to encourage workers to complete their tasks.
-Implement Password recuperation system.
